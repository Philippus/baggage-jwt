[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.AlgorithmSpec, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.JoseHeaderSpec, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.KeySpec, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.JsonWebTokenSpec, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-6, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-15, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-9, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-12, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.processor succeeds if audience claim matches audience claim in set: OK, proved property.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-22, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.audience claim rejects non-stringOrUri's: OK, passed 100 tests.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.generated registered claims are valid: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-8, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-23, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.audience claim accepts stringOrUri: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-4, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.audience claim rejects several non-stringOrUri's: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-19, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.processor succeeds if audience claim does not match audience claim in set - list: OK, proved property.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.audience claim accepts several stringOrUri's: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-20, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-1, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.processor fails if token not valid yet: OK, proved property.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-11, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.processor fails if not all required claim names present in claims set: OK, proved property.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.processor fails if not all expected claim names match claims in set: OK, proved property.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-14, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-13, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.jwt id claim accepts strings: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-26, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.processor fails if audience claim does not match audience claim in set: OK, proved property.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.not before claim accepts numbers >= 0: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-18, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.processor fails if token has expired: OK, proved property.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-24, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-0, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.subject claim accepts stringOrUri: OK, passed 100 tests.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.processor fails if audience claim does not match audience claim in set - list: OK, proved property.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-2, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-16, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.processor takes into account clockSkew for processing expiration time claim: OK, proved property.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-25, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.issued at claim accepts numbers >= 0: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-5, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.processor takes into account clockSkew for processing not before claim: OK, proved property.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-7, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.issuer claim accepts stringOrUri: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-3, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.private claims are always valid: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-10, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.expiration time claim accepts numbers >= 0: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-17, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.processor can process examples in the wild - example from jwt.io: OK, proved property.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.processor can process examples in the wild - example in rfc 7519: OK, proved property.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.processor can process examples in the wild - example from authentikat-jwt: OK, proved property.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.ClaimSpec-21, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.AlgorithmSpec-4, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.processor can process examples in the wild - example from Atlassian: OK, proved property.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.AlgorithmSpec-1, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.AlgorithmSpec-6, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Claim.public claims are always valid: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.AlgorithmSpec-0, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Algorithm.returns None for not supported algorithms: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.AlgorithmSpec-2, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Algorithm.signing fails if keys is empty: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.AlgorithmSpec-5, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Algorithm.signing and then verifying succeeds if key is not empty: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.AlgorithmSpec-7, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Algorithm.verifying fails if signing fails: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.AlgorithmSpec-3, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Algorithm.verifying fails if key is invalid: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.JoseHeaderSpec-4, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Algorithm.verifying fails if signature is invalid: OK, passed 100 tests.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ JoseHeader.contains only the 'alg' and 'typ' parameters with the correct values when constructed with an algorithm: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.JoseHeaderSpec-1, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.JoseHeaderSpec-3, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ JoseHeader.fails decoding if algorithm is not supported: OK, proved property.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.JoseHeaderSpec-2, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ JoseHeader.can be encoded: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.JoseHeaderSpec-0, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ JoseHeader.fails decoding if algorithm is not a string: OK, proved property.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.JoseHeaderSpec-5, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Algorithm.signing and then verifying succeeds if algorithm = "none" (even if key is empty): OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.JsonWebTokenSpec-8, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ JoseHeader.can be encoded then decoded: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.JsonWebTokenSpec-3, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ JsonWebToken.apply only works for at least two parts: OK, proved property.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.JsonWebTokenSpec-7, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ JsonWebToken.jwt should contain at least two parts: OK, passed 100 tests.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ JsonWebToken.decodes examples in the wild - example from authentikat-jwt: OK, proved property.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ JoseHeader.contains the supplied parameters: OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.JsonWebTokenSpec-0, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.JsonWebTokenSpec-1, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ JsonWebToken.decodes examples in the wild - example from atlassian: OK, proved property.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.JsonWebTokenSpec-2, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ JsonWebToken.decodes examples in the wild - example in rfc 7519: OK, proved property.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Algorithm.verifying fails if signature is invalid for algorithm = "none": OK, passed 100 tests.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.JsonWebTokenSpec-4, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.JsonWebTokenSpec-6, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ JsonWebToken.decodes examples in the wild - example from jwt.io: OK, proved property.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.JsonWebTokenSpec-5, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.KeySpec-2, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Key.can be generated from array bytes - example two: OK, proved property.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.KeySpec-1, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Key.can be generated from array bytes - example one: OK, proved property.[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning TaskDef(nl.gn0s1s.baggage.KeySpec-0, org.scalacheck.ScalaCheckFramework$$anon$5@16486a92, false, [SuiteSelector])[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ Key.provides an empty key: OK, proved property.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ JsonWebToken.can generate a jwt from an algorithm and a key: OK, passed 100 tests.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ JsonWebToken.can generate a jwt from a header and a key: OK, passed 100 tests.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m+ JsonWebToken.encoding and then validating succeeds if key is not empty or algorithm = "none": OK, passed 100 tests.[0m[0m
[0m[[0m[0minfo[0m] [0m[0mPassed: Total 53, Failed 0, Errors 0, Passed 53[0m
[0m[[0m[0mdebug[0m] [0m[0mPassed tests:[0m
[0m[[0m[0mdebug[0m] [0m[0m	nl.gn0s1s.baggage.KeySpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	nl.gn0s1s.baggage.JsonWebTokenSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	nl.gn0s1s.baggage.JoseHeaderSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	nl.gn0s1s.baggage.AlgorithmSpec[0m
[0m[[0m[0mdebug[0m] [0m[0m	nl.gn0s1s.baggage.ClaimSpec[0m
